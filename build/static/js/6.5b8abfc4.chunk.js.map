{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/errorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/spinner/spinner.js","components/skeleton/Skeleton.js","utils/setContent.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","style","objectFit","className","src","alt","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","process","loading","error","setProcess","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onLoad","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","onFocus","i","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Error","charasters","map","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderCharList","disabled","comics","renderComics","comicId","resourceURI","slice","to","CharInfo","charId","CharSearchForm","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","ErrorBoundary","decoration","ErrorMessage","display","width","height","margin","img","request","useCallback","url","a","method","body","headers","fetch","responce","ok","status","json","useHttp","_apiBase","_apiKey","_baseOffset","_transformCharacter","path","extension","urls","items","_transformComic","comic","title","pageCount","language","textObjects","price","prices","res","total","console","log","getComics","getComic","Spinner","xmlns","xmlnsXlink","background","shapeRendering","viewBox","preserveAspectRatio","cx","cy","fill","r","attributeName","repeatCount","dur","keyTimes","values","begin","calcMode","Skeleton","state","errorInfo","this","setState","children"],"mappings":"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","file":"static/js/6.5b8abfc4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n   const [char, setChar] = useState({});\r\n\r\n   const { getCharacter, loading, error, process, setProcess, clearError } = useMarvelService();\r\n\r\n   useEffect(() => {\r\n      updateChar();\r\n   }, [])\r\n\r\n   const onCharLoaded = (char) => {\r\n      setChar(char);\r\n   }\r\n\r\n   const updateChar = () => {\r\n      clearError();\r\n      const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\r\n      getCharacter(id)\r\n         .then(onCharLoaded)\r\n         .then(() => setProcess('confirmed'))\r\n   }\r\n\r\n   return (\r\n      <div className=\"randomchar\">\r\n         {setContent(process, View, char)}\r\n         <div className=\"randomchar__static\">\r\n            <p className=\"randomchar__title\">\r\n               Random character for today!<br />\r\n               Do you want to get to know him better?\r\n            </p>\r\n            <p className=\"randomchar__title\">\r\n               Or choose another one\r\n            </p>\r\n            <button className=\"button button__main\">\r\n               <div className=\"inner\" onClick={updateChar}>try it</div>\r\n            </button>\r\n            <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n         </div>\r\n      </div>\r\n   )\r\n\r\n}\r\n\r\n\r\nconst View = ({ data }) => {\r\n   const { name, description, thumbnail, homepage, wiki } = data\r\n\r\n   let style = {}\r\n   if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n      style = { objectFit: 'contain' }\r\n   }\r\n   return (\r\n      <div className=\"randomchar__block\">\r\n         <img src={thumbnail} style={style} alt=\"Random character\" className=\"randomchar__img\" />\r\n         <div className=\"randomchar__info\">\r\n            <p className=\"randomchar__name\">{name}</p>\r\n            <p className=\"randomchar__descr\">\r\n               {description}\r\n            </p>\r\n            <div className=\"randomchar__btns\">\r\n               <a href={homepage} className=\"button button__main\">\r\n                  <div className=\"inner\">homepage</div>\r\n               </a>\r\n               <a href={wiki} className=\"button button__secondary\">\r\n                  <div className=\"inner\">Wiki</div>\r\n               </a>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default RandomChar;","import { useState, useRef, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n   switch (process) {\r\n      case 'waiting':\r\n         return <Spinner />\r\n         break;\r\n      case 'loading':\r\n         return newItemLoading ? <Component /> : <Spinner />\r\n      case 'error':\r\n         return <ErrorMessage />\r\n      case 'confirmed':\r\n         return <Component />\r\n      default:\r\n         throw new Error('Unexpected process state')\r\n   }\r\n}\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n   const [charList, setCharList] = useState([]);\r\n   const [newItemLoading, setNewItemLoading] = useState(false);\r\n   const [offset, setOffset] = useState(400);\r\n   const [charEnded, setCharEnded] = useState(false);\r\n\r\n   const { process, setProcess, getAllCharacters } = useMarvelService();\r\n\r\n   useEffect(() => {\r\n      onLoad(offset, true);\r\n   }, [])\r\n\r\n\r\n   const onLoad = (offset, initial) => {\r\n      initial ? setNewItemLoading(false) : setNewItemLoading(true)\r\n      getAllCharacters(offset)\r\n         .then(onCharListLoaded)\r\n         .then(() => setProcess('confirmed'))\r\n   }\r\n\r\n   const onCharListLoaded = (newCharList) => {\r\n      let ended = false\r\n      if (newCharList.length < 9) ended = true\r\n\r\n      setCharList(charList => [...charList, ...newCharList]);\r\n      setNewItemLoading(false);\r\n      setOffset(offset => offset + 9);\r\n      setCharEnded(ended)\r\n   }\r\n\r\n   const itemRefs = useRef([]);\r\n\r\n   const onFocus = (i) => {\r\n      itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n      itemRefs.current[i].classList.add('char__item_selected')\r\n      itemRefs.current[i].focus();\r\n   }\r\n\r\n   const renderCharList = (CharList) => {\r\n      const charasters = CharList.map((item, i) => {\r\n         const { id, name, thumbnail } = item\r\n\r\n         let imgStyle = { 'objectFit': 'cover' };\r\n         if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n            imgStyle = { 'objectFit': 'unset' };\r\n         }\r\n         return (\r\n            <CSSTransition\r\n               key={id}\r\n               timeout={400}\r\n               classNames='char__item'>\r\n               <li\r\n                  tabIndex={0}\r\n                  ref={el => itemRefs.current[i] = el}\r\n                  className=\"char__item\"\r\n                  onClick={() => {\r\n                     props.onCharSelected(id);\r\n                     onFocus(i)\r\n                  }}\r\n                  onKeyDown={(e) => {\r\n                     if (e.key === \" \" || e.key === \"Enter\") {\r\n                        props.onCharSelected(id);\r\n                        onFocus(i)\r\n                     }\r\n                  }}>\r\n                  <img src={thumbnail} alt=\"abyss\" style={imgStyle} />\r\n                  <div className=\"char__name\">{name}</div>\r\n\r\n               </li>\r\n            </CSSTransition>\r\n         )\r\n      })\r\n      return (\r\n         <TransitionGroup component={'ul'} className=\"char__grid\">\r\n            {charasters}\r\n         </TransitionGroup>\r\n      )\r\n   }\r\n\r\n   const elements = useMemo(() => {\r\n      return setContent(process, () => renderCharList(charList), newItemLoading)\r\n   }, [process])\r\n\r\n   return (\r\n      <div className=\"char__list\">\r\n         {elements}\r\n         <button className=\"button button__main button__long\"\r\n            disabled={newItemLoading}\r\n            style={{ \"display\": charEnded ? \"none\" : 'block' }}\r\n            onClick={() => onLoad(offset)}>\r\n            <div className=\"inner\">load more</div>\r\n         </button>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nCharList.propTypes = {\r\n   onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default CharList;","\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n   const [char, setChar] = useState(null)\r\n\r\n   const { process, setProcess, getCharacter } = useMarvelService();\r\n\r\n   const onCharLoaded = (char) => {\r\n      setChar(char);\r\n   }\r\n\r\n\r\n   const updateChar = () => {\r\n      const { charId } = props;\r\n      if (!charId) {\r\n         return;\r\n      }\r\n      getCharacter(charId)\r\n         .then(onCharLoaded)\r\n         .then(() => setProcess('confirmed'))\r\n   }\r\n\r\n   useEffect(() => {\r\n      updateChar();\r\n   }, [props.charId])\r\n\r\n   return (\r\n      <div className=\"char__info\">\r\n         {setContent(process, View, char)}\r\n      </div>\r\n   )\r\n\r\n}\r\n\r\nconst View = ({ data }) => {\r\n   const { name, description, thumbnail, homepage, wiki, comics } = data\r\n\r\n   let renderComics = 'There are no comics for this character'\r\n\r\n   if (comics.length !== 0) {\r\n      renderComics = comics.map((item, i) => {\r\n         if (i >= 10) { return }\r\n         let comicId = item.resourceURI.slice(43)\r\n         return (\r\n            <li key={i} className=\"char__comics-item \">\r\n               <Link to={`/comics/${comicId}`}>\r\n                  {item.name}\r\n               </Link>\r\n            </li>\r\n         )\r\n      })\r\n   }\r\n\r\n\r\n   let imgStyle = { 'objectFit': 'cover' };\r\n   if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n      imgStyle = { 'objectFit': 'unset' };\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <div className=\"char__basics\">\r\n            <img src={thumbnail} alt={name} style={imgStyle} />\r\n            <div>\r\n               <div className=\"char__info-name\">{name}</div>\r\n               <div className=\"char__btns\">\r\n                  <a href={homepage} className=\"button button__main\">\r\n                     <div className=\"inner\">homepage</div>\r\n                  </a>\r\n                  <a href={wiki} className=\"button button__secondary\">\r\n                     <div className=\"inner\">Wiki</div>\r\n                  </a>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div className=\"char__descr\">\r\n            {description}\r\n         </div>\r\n         <div className=\"char__comics\">Comics:</div>\r\n         <ul className=\"char__comics-list\">\r\n            {renderComics}\r\n         </ul>\r\n      </>\r\n   )\r\n}\r\n\r\n\r\nCharInfo.propTypes = {\r\n   charId: PropTypes.number\r\n}\r\n\r\n\r\nexport default CharInfo;","import * as Yup from 'yup'\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik'\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport ErrorMessage from '../errorMessage/errorMessage';\r\n\r\n\r\nimport './charSearchForm.scss'\r\n\r\n\r\nconst CharSearchForm = () => {\r\n\r\n   const [char, setChar] = useState(null)\r\n\r\n   const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n   const onCharLoaded = (char) => {\r\n      setChar(char);\r\n   }\r\n\r\n   const updateChar = (name) => {\r\n      clearError();\r\n\r\n      getCharacterByName(name)\r\n         .then(onCharLoaded)\r\n         .then(() => setProcess('confirmed'))\r\n   }\r\n\r\n   const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n   let results = null\r\n\r\n   if (char) {\r\n      results =\r\n         <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char.name} page?</div>\r\n            <Link to={`/characters/${char.id}`} className=\"button button__secondary\">\r\n               <div className=\"inner\">To page</div>\r\n            </Link>\r\n         </div>\r\n   }\r\n   else if (char === '') {\r\n      results =\r\n         <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n         </div>\r\n   } else {\r\n      results = null;\r\n   }\r\n\r\n   return (\r\n      <div className=\"char__search-form\">\r\n         <Formik\r\n            initialValues={{\r\n               charName: ''\r\n            }}\r\n            validationSchema={Yup.object({\r\n               charName: Yup.string()\r\n                  .required('This field is required')\r\n            })}\r\n            onSubmit={({ charName }) => {\r\n               updateChar(charName)\r\n            }}\r\n         >\r\n            <Form>\r\n               <label htmlFor=\"charName\" className=\"char__search-label\">Or find a character by name:</label>\r\n               <div className=\"char__search-wrapper\">\r\n                  <Field\r\n                     id=\"charName\"\r\n                     name='charName'\r\n                     type='text'\r\n                     placeholder=\"Enter name\" />\r\n                  <button\r\n                     type='submit'\r\n                     className=\"button button__main\"\r\n                     disabled={process === 'loading'}>\r\n                     <div className=\"inner\">find</div>\r\n                  </button>\r\n               </div>\r\n               <FormikErrorMessage className='char__search-error' name='charName' component={'div'} />\r\n\r\n            </Form>\r\n         </Formik>\r\n         {results}\r\n         {errorMessage}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default CharSearchForm","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport decoration from '../../resources/img/vision.png'\r\n\r\nconst MainPage = () => {\r\n\r\n   const [selectedChar, setChar] = useState(null)\r\n\r\n   const onCharSelected = id => setChar(id)\r\n   return (\r\n      <>\r\n         <Helmet>\r\n            <meta\r\n               name=\"description\"\r\n               content=\"Marvel information portal\"\r\n            />\r\n            <title>Marvel information portal</title>\r\n\r\n         </Helmet>\r\n         <ErrorBoundary>\r\n            <RandomChar />\r\n         </ErrorBoundary>\r\n         <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n               <CharList onCharSelected={onCharSelected}\r\n               />\r\n            </ErrorBoundary>\r\n            <div>\r\n               <ErrorBoundary>\r\n                  <CharInfo charId={selectedChar} />\r\n               </ErrorBoundary>\r\n               <ErrorBoundary>\r\n                  <CharSearchForm />\r\n               </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MainPage","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img style={{\r\n         display: 'block', width: \"250px\",\r\n         height: \"250px\", objectFit: 'contain',\r\n         margin: \"0 auto\"\r\n      }}\r\n         src={img} alt=\"Error Gif\" />\r\n   )\r\n}\r\n\r\nexport default ErrorMessage","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n   const { request, clearError, process, setProcess } = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n   const _apiKey = 'apikey=6384ce9cf17f02f85ebfa13f965d5627';\r\n   const _baseOffset = 400;\r\n\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name,\r\n         description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items\r\n      }\r\n   }\r\n\r\n   const _transformComic = (comic) => {\r\n      return {\r\n         id: comic.id,\r\n         title: comic.title,\r\n         description: comic.description || 'There is no description',\r\n         pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n         language: comic.textObjects.language || 'en-us',\r\n         thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n         price: comic.prices.price ? `${comic.prices.price}$` : 'not available'\r\n      }\r\n   }\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`)\r\n      return res.data.results.map(item => _transformCharacter(item))\r\n   }\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`)\r\n      return _transformCharacter(res.data.results[0]);\r\n   }\r\n\r\n   const getCharacterByName = async (char) => {\r\n      let res = await request(`${_apiBase}characters?name=${char}&${_apiKey}`)\r\n      if (!res.data.total) {\r\n         return res = ''\r\n      }\r\n      console.log(res)\r\n      return _transformCharacter(res.data.results[0]);\r\n   }\r\n\r\n   const getComics = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`)\r\n      return res.data.results.map(comic => _transformComic(comic))\r\n   }\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`)\r\n      return _transformComic(res.data.results[0]);\r\n   }\r\n\r\n\r\n   return {\r\n      clearError,\r\n      process,\r\n      setProcess,\r\n      getAllCharacters,\r\n      getCharacter,\r\n      getComics,\r\n      getComic,\r\n      getCharacterByName,\r\n   }\r\n}\r\n\r\nexport default useMarvelService","import { useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n\r\n   const [process, setProcess] = useState('waiting')\r\n\r\n   const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n      setProcess('loading')\r\n\r\n      try {\r\n         const responce = await fetch(url, { method, body, headers })\r\n         if (!responce.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${responce.status}`)\r\n         }\r\n         const data = await responce.json();\r\n\r\n         return data\r\n\r\n      } catch (e) {\r\n         setProcess('error')\r\n         throw (e);\r\n      }\r\n\r\n   }, [])\r\n\r\n   const clearError = useCallback(() => {\r\n      setProcess('loading')\r\n   }, [])\r\n\r\n   return { request, clearError, setProcess, process }\r\n}","const Spinner = () => {\r\n   return (\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" style={{ margin: '0 auto', background: 'rgb(255, 255, 255)', display: 'block', shapeRendering: 'auto', width: \"250px\", height: \"250px\" }} viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n         <circle cx=\"41\" cy=\"50\" fill=\"#000000\" r=\"9\">\r\n            <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1235955056179776s\" keyTimes=\"0;0.5;1\" values=\"41;59;41\" begin=\"-0.5617977528089888s\"></animate>\r\n         </circle>\r\n         <circle cx=\"59\" cy=\"50\" fill=\"#ff0000\" r=\"9\">\r\n            <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1235955056179776s\" keyTimes=\"0;0.5;1\" values=\"41;59;41\" begin=\"0s\"></animate>\r\n         </circle>\r\n         <circle cx=\"41\" cy=\"50\" fill=\"#000000\" r=\"9\">\r\n            <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1235955056179776s\" keyTimes=\"0;0.5;1\" values=\"41;59;41\" begin=\"-0.5617977528089888s\"></animate>\r\n            <animate attributeName=\"fill-opacity\" values=\"0;0;1;1\" calcMode=\"discrete\" keyTimes=\"0;0.499;0.5;1\" dur=\"1.1235955056179776s\" repeatCount=\"indefinite\"></animate>\r\n         </circle>\r\n      </svg>\r\n   )\r\n}\r\n\r\nexport default Spinner","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/errorMessage\";\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n   switch (process) {\r\n      case 'waiting':\r\n         return <Skeleton />\r\n         break;\r\n      case 'loading':\r\n         return <Spinner />\r\n      case 'error':\r\n         return <ErrorMessage />\r\n      case 'confirmed':\r\n         return <Component data={data} />\r\n      default:\r\n         throw new Error('Unexpected process state')\r\n   }\r\n}\r\n\r\nexport default setContent","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = {\r\n      error: false\r\n   }\r\n\r\n   componentDidCatch(error, errorInfo) {\r\n      console.log(error, errorInfo)\r\n      this.setState({\r\n         error: true\r\n      })\r\n   }\r\n\r\n   render() {\r\n      if (this.state.error) {\r\n         return <ErrorMessage />\r\n      }\r\n      return this.props.children\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n"],"sourceRoot":""}